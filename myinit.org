* Bootstrap
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

    (package-initialize)

    (when (not package-archive-contents)
        (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

    (add-to-list 'load-path "~/.emacs.d/custom")

    (require 'setup-general)
    (if (version< emacs-version "24.4")
        (require 'setup-ivy-counsel)
      (require 'setup-helm)
      (require 'setup-helm-gtags))
    ;; (require 'setup-ggtags)
    (require 'setup-cedet)
    (require 'setup-editing)

  #+END_SRC
* My Functions
  #+BEGIN_SRC emacs-lisp
    (defun load! (file)
      (setq config-file (concat my-config-base file))
      (when (file-exists-p config-file)
        (load config-file)))

    (defun my-prog-mode-hook ()
      (c-set-style "bsd")
      (setq-default tab-width 4)
      (setq c-basic-offset 4)
      (setq indent-tabs-mode nil)
      (helm-gtags-mode))

    (defun my-clang-format-before-save ()
      "Usage: (add-hook 'before-save-hook 'my-clang-format-before-save)."
      (when (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
        (clang-format-buffer)))

    (defun my-package-install-p (pkg)
      (require pkg nil 'noerror))

    (defun helm-gtags-create-tags-root ()
      (interactive)
      (helm-gtags-create-tags (projectile-project-root) "default"))

  #+END_SRC

* My Configs
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      ;; meta
      (setq mac-option-modifier 'super)
      (setq mac-command-modifier 'meta)
      ;; go
      (setq exec-path (append '("/usr/local/go/bin")
                              exec-path))
      (setq exec-path (append '("/usr/local/bin")
                              exec-path)))

    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq column-number-mode t)
    (setq enable-evil-mode 0)
    (when (version<= "26.0.50" emacs-version )
      (add-hook 'prog-mode-hook #'(lambda () (display-line-numbers-mode t))))
    (unless (version<= "26.0.50" emacs-version)
      (add-hook 'prog-mode-hook #'(lambda () (linum-mode t)
                                    (setq linum-format "%4d \u2502 ")
                                    (set-face-attribute 'linum nil :foreground "gray"))))

    (show-paren-mode 1)

    (when window-system
      (blink-cursor-mode 0)
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
      (tooltip-mode 0)
      (menu-bar-mode 0))

    (global-auto-revert-mode t)

    (add-hook 'c-mode-hook 'my-prog-mode-hook)
    (add-hook 'c++-mode-hook 'my-prog-mode-hook)

    (set-language-environment "Korean")
    (prefer-coding-system 'utf-8)
    (when window-system
      (set-fontset-font "fontset-default" '(#x1100 . #xffdc)  '("NanumGothicCoding" . "unicode-bmp"))
      (set-fontset-font "fontset-default" '(#xe0bc . #xf66e) '("NanumGothicCoding" . "unicode-bmp"))
      )

  #+END_SRC

* My Packages
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme)

    (use-package find-file-in-repository
      :config
      (global-set-key (kbd "C-x f") 'find-file-in-repository))

    ;; platuml-mode
    ;; (use-package plantuml
    ;;   :init
    ;;   (add-to-list 'auto-mode-alist '("\.pu$" . plantuml-mode))
    ;;   (setq plantuml-jar-path "~/local/platuml/plantuml.jar")
    ;;   (setq plantuml-java-options "")
    ;;   (setq plantuml-options "-charset UTF-8")
    ;;   (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
    ;;   (setq org-plantuml-jar-path (expand-file-name "/Users/user/local/platuml/plantuml.jar")))

    ;; company-mode (auto completion)
    (use-package company
      :config
      (setq company-dabbrev-downcase nil))


    (use-package go-mode
      :config
      (add-hook 'go-mode-hook 'helm-gtags-mode)
      (defun my-go-mode-hook ()
        (add-hook 'before-save-hook 'gofmt-before-save))
      (add-hook 'go-mode-hook 'my-go-mode-hook)
      (setenv "GOPATH" "~/project/go")
      )

    ;; projectile
    (use-package projectile
      :config
      (projectile-global-mode)
      (define-key projectile-mode-map (kbd "C-c p") #'projectile-command-map)
      (setq projectile-indexing-method 'hybrid))

    ;; clang-format
    (use-package clang-format
      :config
      (defun my-c++-mode-hook ()
        ;; (fset 'c-indent-region 'clang-format-region)
        (global-set-key (kbd "C-c f r") 'clang-format-region)
        (global-set-key (kbd "C-c f b") 'clang-format-buffer))
      (add-hook 'before-save-hook 'my-clang-format-before-save)
      (add-hook 'c++-mode-hook 'my-c++-mode-hook)
      (add-hook 'c-mode-hook 'my-c++-mode-hook))

    (use-package slime
      :config
      (load (expand-file-name "~/.quicklisp/slime-helper.el"))
      (setq inferior-lisp-program "sbcl"))

    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      :config
      (setq-default evil-symbol-word-search t)
      (evil-mode enable-evil-mode))

    (use-package evil-collection
      :requires evil
      :custom (evil-collection-setup-minibuffer t)
      :ensure t
      :config
      (evil-collection-init))

    (use-package general
      :requires evil
      :ensure t)

    (use-package evil-magit
      :requires evil)

    (use-package magit
      :config
      (evil-set-initial-state #'git-commit-mode 'insert))

    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config (progn (which-key-mode)
                     (which-key-setup-side-window-bottom)))

    (use-package cmake-ide
      :config
      (setq
       helm-make-build-dir "build"
       helm-make-arguments "-j4"
       cmake-ide-build-dir "build"
       cmake-ide-cmake-args '("-DCMAKE_BUILD_TYPE=Debug")
       ))

    (use-package popwin
      :config
      (popwin-mode t))

    (use-package helm-ag
      :requires helm)

    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))

    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      )

    (use-package beacon
      :config
      (beacon-mode 1)
      (setq beacon-blink-delay 0.0)
      (setq beacon-blink-duration 0.2)
      )

  #+END_SRC

* My Keybinding
** Functions
  #+BEGIN_SRC emacs-lisp
    (setq-default
      leader-key "SPC"
      leader-for-major-mode ",")

    (defun set-keys-for-major-mode (maps key def &rest bindings)
      (while key
        (general-define-key
          :prefix ","
          :states 'normal
          :keymaps maps
          key def)
        (setq key (pop bindings) def (pop bindings))))

    (defun set-keys (key def &rest bindings)
      (while key
        (general-define-key
          :states 'normal
          :prefix leader-key
          key def)
        (setq key (pop bindings) def (pop bindings))))

    (defun declare-prefixes (prefix name &rest bindings)
      (while prefix
        (which-key-add-key-based-replacements (concat leader-key " " prefix) name)
        (setq prefix (pop bindings) name (pop bindings))))

    (defun declare-prefixes-for-major-mode (mode key def &rest bindings)
      (while key
        (which-key-add-major-mode-key-based-replacements mode (concat leader-for-major-mode key) def)
        (setq key (pop bindings) def (pop bindings))))

  #+END_SRC
** Evil keybindings
   #+BEGIN_SRC emacs-lisp
     (declare-prefixes
      "a"   "applications"
      "b"   "buffers"
      "f"   "files"
      "g"   "helm-gtags"
      "h"   "helm"
      "p"   "projectile"
      "w"   "windows")

     ;; global
     (set-keys
      "SPC" 'helm-M-x
      "TAB" 'evil-switch-to-windows-last-buffer
      "!"   'shell-command
      "&"   'async-shell-command
      "/"   'helm-do-ag-project-root
      )

     ;; applications
     (set-keys
      "ac"  'calc-dispatch
      "ad"  'dired
      "ag"  'magit
      "aP"  'proced
      "au"  'undo-tree-visualize)

     ;; buffer
     (set-keys
      "bb"  'helm-buffers-list
      "bd"  'kill-this-buffer)

     (set-keys
      "gC" 'helm-gtags-create-tags
      "gu" 'helm-gtags-update-tags
      "gg" 'helm-gtags-find-pattern
      "gd" 'helm-gtags-find-tag-from-here
      "gn" 'helm-gtags-next-history
      "gp" 'helm-gtags-previous-history)

     (set-keys-for-major-mode 'helm-gtags-mode-map
      "gC" 'helm-gtags-create-tags
      "gu" 'helm-gtags-update-tags
      "gg" 'helm-gtags-find-pattern
      "gd" 'helm-gtags-find-tag-from-here
      "gn" 'helm-gtags-next-history
      "gp" 'helm-gtags-previous-history)

     (set-keys
      "cc" 'cmake-ide-compile
      "cC" 'cmake-ide-run-cmake)

     ;; projectile
     (set-keys
      "pp" 'helm-projectile-switch-project
      "pf" 'helm-projectile-find-file
      "p!" 'projectile-run-shell-command-in-root
      "p&" 'projectile-run-async-shell-command-in-root
      "pi" 'projectile-invalidate-cache
      "pD" 'projectile-dired
      "pa" 'projectile-find-other-file
      "pg" 'helm-gtags-create-tags-root
      "pG" 'helm-gtags-create-tags)

     ;; files
     (set-keys
      "ff" 'helm-find-files
      "fs" 'save-buffer)

     ;; helm
     (set-keys
      "ho" 'helm-swoop
      "hr" 'helm-regexp
      "hb" 'helm-resume
      "ha" 'helm-do-ag
      )

     ;; general
     (general-define-key
      :states 'normal
      )

   #+END_SRC

** Emacs keybindings
   #+BEGIN_SRC emacs-lisp
     (general-emacs-define-key prog-mode-map
       "C-c c" 'cmake-ide-compile
       "C-c C" 'cmake-ide-run-cmake
       )

     (general-emacs-define-key helm-gtags-mode-map
       "C-c g C" 'helm-gtags-create-tags
       "C-c g n" 'helm-gtags-next-history
       "C-c g p" 'helm-gtags-previous-history
       )

     (general-emacs-define-key global-map
       "C-x TAB" 'evil-switch-to-windows-last-buffer
       "C-c /"   'helm-do-ag
       "C-c C-/" 'helm-swoop
       "C-s"     'helm-swoop
       "C-c C-k" 'evil-yank-line
       )

     (general-emacs-define-key prog-mode-map
       "C-c C-c"   'comment-or-uncomment-region
       )
   #+END_SRC

   
